module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.0-beta). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregatetodo {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createtodo(data: todoCreateInput!): todo!
  updatetodo(data: todoUpdateInput!, where: todoWhereUniqueInput!): todo
  updateManytodoes(data: todoUpdateManyMutationInput!, where: todoWhereInput): BatchPayload!
  upserttodo(where: todoWhereUniqueInput!, create: todoCreateInput!, update: todoUpdateInput!): todo!
  deletetodo(where: todoWhereUniqueInput!): todo
  deleteManytodoes(where: todoWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  todo(where: todoWhereUniqueInput!): todo
  todoes(where: todoWhereInput, orderBy: todoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [todo]!
  todoesConnection(where: todoWhereInput, orderBy: todoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): todoConnection!
  node(id: ID!): Node
}

type Subscription {
  todo(where: todoSubscriptionWhereInput): todoSubscriptionPayload
}

type todo {
  id: ID!
  description: String!
  completed: Boolean!
}

type todoConnection {
  pageInfo: PageInfo!
  edges: [todoEdge]!
  aggregate: Aggregatetodo!
}

input todoCreateInput {
  id: ID
  description: String!
  completed: Boolean!
}

type todoEdge {
  node: todo!
  cursor: String!
}

enum todoOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  completed_ASC
  completed_DESC
}

type todoPreviousValues {
  id: ID!
  description: String!
  completed: Boolean!
}

type todoSubscriptionPayload {
  mutation: MutationType!
  node: todo
  updatedFields: [String!]
  previousValues: todoPreviousValues
}

input todoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: todoWhereInput
  AND: [todoSubscriptionWhereInput!]
  OR: [todoSubscriptionWhereInput!]
  NOT: [todoSubscriptionWhereInput!]
}

input todoUpdateInput {
  description: String
  completed: Boolean
}

input todoUpdateManyMutationInput {
  description: String
  completed: Boolean
}

input todoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  completed: Boolean
  completed_not: Boolean
  AND: [todoWhereInput!]
  OR: [todoWhereInput!]
  NOT: [todoWhereInput!]
}

input todoWhereUniqueInput {
  id: ID
}
`
      }
    